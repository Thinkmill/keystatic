---
title: Collections & singletons
summary: >-
  Keystatic has two concepts or mechanisms to manage data: collections and
  singletons.
---
Keystatic has two *concepts* or mechanisms to manage data: `collections` and `singletons`.

Those are defined in the [Keystatic configuration](/docs/configuration).

## Collections

Think of a `collection` as anything you'd want multiple instances of. A series of blog posts, cooking recipes, or testimonials from happy customers.

Collections are defined within the `collections` key of the Keystatic `config`. Each collection has its own key and is wrapped in a `collection()` function.

### Example collection

Here's how you'd define a `testimonial` collection, where each entry has an `author` and a `quote` fields:

```jsx
// keystatic.config.ts
import { config, collection } from '@keystatic/core';

export default config({
  // ...
  collections: {
    testimonials: collection({
      label: 'Testimonials',
      slugField: 'author',
      schema: {
        author: fields.slug({ name: { label: 'Author' } }),
        quote: fields.text({ label: 'Quote', multiline: true })
      }
    }),
  },
});
```

### Slug field

Use the `slugField` option to define what field in your collection `schema` should be used as the slug for each item. It's recommended to combine it with the [slug field](/docs/fields/slug) to let users customise and regenerate each slug in the Admin UI.

```typescript
testimonials: collection({
  label: 'Testimonials',
  schema: {
    title: fields.slug({ name: { label: 'Title' } }),
  },
  slugField: 'title',
}),
```

### File system path

You can use the `path` option to specify *where* to store entries for any given collection:

```diff
testimonials: collection({
  label: 'Testimonials',
  // ...
+ path: 'custom/content/path/testimonials/*'
  schema: {}
}),
```

By default, Keystatic will store entries at the root of your project, in a directory that matches the collection key.

You can learn more about the `path` option on the [Organised content page](/docs/how-keystatic-organises-your-content#collections).

---

## Singletons

When you want a “one-of-a-kind” data entry, such as a “Settings” page or maybe a very specific set of fields for the “Homepage” of a website, you'll want to use a `singleton`.

### Example singleton

Here's how you'd define a `settings` singleton:

```jsx
// keystatic.config.ts
import { config, singleton } from '@keystatic/core';

export default config({
  // ...
  singletons: {
    settings: singleton({
      label: 'Settings',
      schema: {}
    }),
  },
});
```

### File system path

You can use the `path` option to specify *where* to store any given singleton:

```diff
settings: singleton({
  label: 'Settings',
+ path: 'custom/content/path/settings'
  schema: {}
}),
```

By default, Keystatic will store a singleton at the root of your project, in a directory that matches the singleton key.

You can learn more about the `path` option on the [Organised content page](/docs/how-keystatic-organises-your-content#singletons).
