---
title: Collections & singletons
---
Keystatic has two *concepts* or mechanisms to manage data: `collections` and `singletons`.

## Collections

Think of a `collection` as anything you'd want multiple instances of.

A series of blog posts, cooking recipes or testimonials from happy customers.

To create a `collection` in your project, add a `collections` key to your Keystatic config:

```jsx
// Keystatic config
import { config, collection } from '@keystatic/core';

export default config({
  // ...
  collections: {
    testimonials: collection({
      label: 'Testimonials',
    }),
  },
});
```

The config above creates a new `testimonials` collection.

{% cloud-image
   href="https://keystatic.io/images/keystatic-docs/collectionsandsingletons1.png"
   alt="Keystatic with testimonials collection selected in the sidebar" /%}

Wrapping the `testimonials` config object inside the `collection()` function provides TypeScript autocomplete goodness ✨

{% cloud-image
   href="https://keystatic.io/images/keystatic-docs/collectionsandsingletons2.png"
   alt="Code with autocomplete menu inside a collection function call with 6 items: label, schema, slugField, directory, directorySuffix and format" /%}

### Slug field

Use the `slugField` option to define what field in your collection `schema` should be used as the slug for each item. It's recommended to combine it with the [slug field](/docs/fields/slug) to let users customise and regenerate each slug in the Admin UI.

```typescript
testimonials: collection({
  label: 'Testimonials',
  schema: {
    title: fields.slug({ name: { label: 'Title' } }),
  },
  slugField: 'title',
}),
```

## Singletons

When you want a “one-of-a-kind” data entry, such as a “Settings” page or maybe a very specific set of fields for the “Homepage” of a website, you'll want to use a `singleton`.

To create a `singleton` in your project, add a `singleton` key to your Keystatic config:

```jsx
// Keystatic config
import { config, singleton } from '@keystatic/core';

export default config({
  // ...
  singletons: {
    homepage: singleton({
      label: 'Homepage',
      // ...
    }),
  },
});
```

The config above creates a new `homepage` singleton.

{% cloud-image
   href="https://keystatic.io/images/keystatic-docs/collectionsandsingletons3.png"
   alt="Keystatic with a homepage singleton selected with a text field: headline, welcome to keystatic" /%}

Wrapping the `homepage` config object inside the `singleton()` function provides TypeScript autocomplete goodness ✨

{% cloud-image
   href="https://keystatic.io/images/keystatic-docs/collectionsandsingletons4.png"
   alt="Code with autocomplete menu inside a singleton function call with 4 items: label, schema, directory and format" /%}
