---
title: Conditional field
---
The `conditional` field lets you setup a&nbsp;`discriminant`&nbsp;for a condition that can be either a&nbsp;`checkbox`&nbsp;or a&nbsp;`select`&nbsp;field with a few options.

You can then display an entirely different set of fields based on the condition, by providing a key for each condition:

- `true`/`false`&nbsp;if you used a&nbsp;`checkbox`
- each possible value if you used a&nbsp;`select`

## Usage example

### Checkbox discriminant

Let's say you want to optionally display SEO title/description fields, but only if a user checks a checkbox.

```typescript
seo: fields.conditional(
  // First, we define a checkbox to drive the yes/no condition
  fields.checkbox({ label: 'Define custom SEO tags', defaultValue: false }),
  // Then, we provide a set of fields for both the `true` and `false` scenarios
  {
    true: fields.object({
      title: fields.text({ label: 'Title' }),
      description: fields.text({ label: 'Description' }),
    }),
    // Empty fields are useful to show... no fields!
    false: fields.empty(),
  }
)
```

### Select discriminant

Here's a more complex example where you have an optional&nbsp;`Featured media`&nbsp;field for an entry.

The options for it are&nbsp;`none`,&nbsp;`image`&nbsp;and&nbsp;`video`.

```typescript
// Featured media
featuredMedia: fields.conditional(
  // First, define a `select` field with all the available "conditions"
  fields.select({
    label: 'Featured media',
    description: 'Optional image/video options for an optional hero media.',
    options: [
      { label: 'No media', value: 'none' },
      { label: 'Image', value: 'image' },
      { label: 'Video', value: 'video' },
    ],
    defaultValue: 'none',
  }),
  // Then, provide a schema for each condition
  {
    // "none" condition
    none: fields.empty(),
    // "image" condition
    image: fields.object({
      asset: fields.image({
        label: 'Image',
        directory: 'public/images/events',
        publicPath: '/images/events/',
        validation: { isRequired: true },
      }),
      alt: fields.text({ label: 'Alt', description: 'Image alt text.' }),
    }),
    // "video" condition
    video: fields.object({
      url: fields.text({
        label: 'A YouTube video URL.',
        validation: { length: { min: 1 } },
      }),
      image: fields.object({
        asset: fields.image({
          label: 'Image',
          description: 'Thumbnail image override for the video.',
          directory: 'public/images/events',
          publicPath: '/images/events/',
        }),
        alt: fields.text({ label: 'Alt', description: 'Image alt text.' }),
      }),
    }),
  }
),
```

## Type signature

```typescript
conditional<
  DiscriminantField extends BasicFormField<string> | BasicFormField<boolean>,
  ConditionalValues extends {
    [Key in `${ReturnType<
      DiscriminantField['defaultValue']
    >}`]: ComponentSchema;
  }
>(
  discriminant: DiscriminantField,
  values: ConditionalValues
)
```
